{"padTitle":"presenter",
"positions":{"map":{"__map":true,
"values":[["1",{"height":683.8798866117842,
"id":"1",
"type":"move",
"width":530.5693771255451,
"x":-672.9385205805022,
"y":-346.2861174475163}],["7",{"height":375.5383521488265,
"id":"7",
"type":"move",
"width":673.5775227975352,
"x":627.752471466846,
"y":-350.106756994686}],["12",{"height":1509.800452892262,
"id":"12",
"type":"move",
"width":626.5377424784541,
"x":1456.291385079744,
"y":-352.09405600108335}],["16",{"height":162.6336348920213,
"id":"16",
"type":"move",
"width":647.2166649069342,
"x":-84.30487765866869,
"y":57.646389666422266}],["20",{"height":347.0888520378802,
"id":"20",
"type":"resize",
"width":637.1751870914861,
"x":-75.89175148857228,
"y":-341.26333858230873}],["24",{"height":1301.1567654748303,
"id":"24",
"type":"resize",
"width":688.1243303814214,
"x":623.5661705702177,
"y":76.88064794983097}],["51",{"height":1074.8485356554809,
"id":"51",
"type":"move",
"width":674.2043744610681,
"x":-116.7190340827679,
"y":288.1185297713136}],["54",{"height":891.2879516880103,
"id":"54",
"type":"resize",
"width":663.0255536124862,
"x":2179.512993101045,
"y":-353.48465933608566}]]}},
"titles":{"map":{"__map":true,
"values":[["1",{"id":"1",
"state":false,
"title":"Initialization"}],["7",{"id":"7",
"state":false,
"title":"Rendering"}],["12",{"id":"12",
"state":false,
"title":"CSS"}],["16",{"id":"16",
"state":false,
"title":"editorUpdate"}],["20",{"id":"20",
"state":false,
"title":"newEditor"}],["24",{"id":"24",
"state":false,
"title":"Separator"}],["51",{"id":"51",
"state":false,
"title":"Scroll"}],["54",{"id":"54",
"state":false,
"title":"Save and Load"}]]}},
"version":3,
"windowEnabled":{"map":{"__map":true,
"values":[["1",{"enabled":true,
"id":"1"}],["7",{"enabled":true,
"id":"7"}],["12",{"enabled":true,
"id":"12"}],["16",{"enabled":true,
"id":"16"}],["20",{"enabled":true,
"id":"20"}],["24",{"enabled":true,
"id":"24"}],["51",{"enabled":true,
"id":"51"}],["54",{"enabled":true,
"id":"54"}]]}},
"windowTypes":{"map":{"__map":true,
"values":[["1","code"],["7","code"],["12","code"],["16","code"],["20","code"],["24","code"],["51","code"],["54","code"]]}},
"windows":["1","7","12","16","20","24","51","54"],
"zIndex":{"map":{"__map":true,
"values":[["1",106],["7",112],["12",103],["16",114],["20",105],["24",111],["51",110],["54",113]]}}}
{__codeMap: true, value: [[`1`, `const init = (() => {
    const script = document.createElement("script");
    script.id = "markdownit";
    script.src = "./markdown-it.min.js";
    const promise = new Promise((resolve) => {
      script.onload = () => {
         resolve(window.markdownit);
      };
    });

    document.head.querySelector("#markdownit")?.remove();
    document.head.appendChild(script);

    const container = document.createElement("div");
    container.id = "container";
    document.body.querySelector("#container")?.remove();
    document.body.appendChild(container);
    container.innerHTML = \`
    <div id="result"></div>
    <div id="separator"></div>
    <div id="editorContainer">
      <div id="buttons">
        <button class="menuButton" id="save">save</button>
        <button class="menuButton" id="load">load</button>
      </div>
    </div>
\`.trim();
    return {markdownit: promise, container};
})();

const resolved = Behaviors.resolvePart(init);
const md = resolved.markdownit({html: true});
const container = resolved.container;
const separator = container.querySelector("#separator");
`],
[`7`, `const result = md.render(editorString);

const resultDiv = Behaviors.keep(((result, container) => {
  const div = document.createElement("div");
  div.id = "renkon";
  container.querySelector("#renkon")?.remove();
  container.querySelector("#result").appendChild(div);
  div.innerHTML = result;
  return div;
})(result, container));

const editor = newEditor("0", \`\`, callback, notify);

const callback = (id, update) => notify[0]({id, update});
const editorString = editorUpdate.update.state.doc.toString();
container.querySelector("#editorContainer").appendChild(editor.dom);`],
[`12`, `const css = \`
#container, html, body {
  width: 100%;
  height: 100%;
  margin: 0px;
}

#container {
  display: flex;
}

#result {
  height: 100%;
  width: calc(100% - 220px);
  overflow: scroll;
  scroll-behavior: smooth;
}

#renkon {
  height: 100%;
}

#separator {
   width: 8px;
   min-width: 8px;
   height: 100%;
   background-color: #f8f8f8;
}

#separator:hover {
   background-color: #e8e8e8;
   cursor: ew-resize;
}

#editorContainer {
  position: fixed;
  right: 0px;
  min-height: 100%;
  height: 100%;
  width: 200px;
  border: 1px solid black;
  padding: 6px;
  min-width: 0px;
  background-color: white;
  white-space: pre-wrap;
  overflow: scroll;

  display: flex;
  flex-direction: column;
}

#buttons {
   display: flex;
   justify-content: right;
}

.menuButton {
  font-family: 'OpenSans-SemiBold';
  color: black;
  margin-left: 4px;
  margin-right: 4px;
  border-radius: 4px;
  cursor: pointer;
  border: 2px solid #555;
}

\`.trim();

((css) => {
    document.head.querySelector("#presenter-style")?.remove();
    const style = document.createElement("style");
    style.id = "presenter-style";
    style.textContent = css;
    document.head.appendChild(style);

    document.head.querySelector("#separator-style")?.remove();
    const sepStyle = document.createElement("style");
    sepStyle.id = "separator-style";
    document.head.appendChild(sepStyle);
})(css);
`],
[`16`, `const editorUpdate = Events.observe((callback) => {
   notify[0] = (...v) => callback(...v);
   return () => notify.shift();
})
const notify = [];`],
[`20`, `const newEditor = (id, doc, callback) => {
    const mirror = window.CodeMirror;
    const editor = new mirror.EditorView({
        doc: doc || \`# Hello, Renkon\`,

        extensions: [
            mirror.basicSetup,
            mirror.EditorView.lineWrapping,
            mirror.EditorView.updateListener.of((viewUpdate) => callback(id, viewUpdate)),
            mirror.EditorView.editorAttributes.of({"class": "editor"}),
            mirror.view.keymap.of([mirror.commands.indentWithTab])
        ],
    });
    editor.dom.id = \`\${id}-editor\`;
    return editor;
};
`],
[`24`, `const sepDown = Events.listener(
   separator,
   "pointerdown",
   evt => evt);

const down = Events.collect(undefined, sepDown, (old, evt) => {
  if (evt.isPrimary) {
    evt.target.setPointerCapture(evt.pointerId);
  }
  return {type: "sepDown", x: evt.clientX};
});

const up = Events.listener(
  separator,
  "pointerup",
  (evt) => {
    if (evt.isPrimary) {
      evt.target.releasePointerCapture(evt.pointerId);
    }
    return {type: "sepUp"}
  }
);

const _sepMove = Events.listener(separator, "pointermove", moveCompute);

const moveCompute = Behaviors.select(
  evt => evt,
  down, (_old, down) => {
    return (move) => {
      const newX = move.clientX;
      const newRenkonWidth = Math.min(window.innerWidth - 8, Math.max(newX - 8, 0));
      const newEditorWidth = Math.max(window.innerWidth - 22 - newRenkonWidth, 60);
      const right = newEditorWidth === 60 ? -60 - 16 + (window.innerWidth - newX) : 0;

      document.head.querySelector("#separator-style").textContent = \`
#result {
  width: \${newRenkonWidth}px;
}
#editorContainer {
  width: \${newEditorWidth}px;
  right: \${right}px;
}

\`.trim();
      return move;
    }
  },
  up, (_old, _up) => (move) => move,
  resize, (old, resize) => {
    const newX = window.innerWidth - 22;
    const newEditorWidth = 60;
    const right = -60;
      document.head.querySelector("#separator-style").textContent = \`
#result {
  width: \${newX}px;
}

#editorContainer {
  width: \${newEditorWidth}px;
  right: \${right}px;
}

\`.trim();
    return old;
  }
);

const resize = Events.listener(window, "resize", (evt) => ({type: "resize"}));
`],
[`51`, `// const key = Events.listener(document.body, "keydown", keyHandler);


const key = Events.observe((notify) => {
  const handler = evt => {
    if (evt.target !== document.body) {return;}
    if (evt.key !== "ArrowUp" && evt.key !== "ArrowDown") {return;}
    evt.preventDefault();
    notify(evt);
  };
  document.body.addEventListener("keydown", handler);
  return () => document.body.removeEventListener("keydown", handler);
});


const keyHandler = ((evt) => {
  if (evt.target !== document.body) {return;}

  if (evt.key !== "ArrowUp" && evt.key !== "ArrowDown") {return;}

  const sections = [
    ...resultDiv.querySelectorAll("h1"),
    ...resultDiv.querySelectorAll("h2")
  ];

  sections.sort((a, b) => a.getBoundingClientRect().top - b.getBoundingClientRect().top);
  let found;
  if (evt.key === "ArrowDown") {
    for (const section of sections) {
      const rect = section.getBoundingClientRect();
      if (rect.top >= 20) {
        found = section;
        break;
      }
    }
  } else if (evt.key === "ArrowUp") {
    for (let ind = sections.length - 1; ind >= 0; ind--) {
      const section = sections[ind];
      const rect = section.getBoundingClientRect();
      if (rect.top < -5) {
        found = section;
        break;
      }
    }    
  }
  if (!found) {return;}

  evt.preventDefault();

  const result = container.querySelector("#result");
  if (!result) {return;}
  const resultRect = result.getBoundingClientRect();
  //  console.log("scroll top before", result.scrollTop, found.getBoundingClientRect().top)
  result.scrollTop += found.getBoundingClientRect().top;
  // console.log("scroll top after", result.scrollTop)
})(key);`],
[`54`, `const save = Events.listener(container.querySelector("#save"), "click", (evt) => evt)
const load = Events.listener(container.querySelector("#load"), "click", (evt) => evt)

const _saver = ((editor, save) => {
  debugger;
  const data = editor.state.doc.toString();

  const dataStr = "data:text/plain;charset=utf-8," + encodeURIComponent(data);
  const div = document.createElement("a");
  div.setAttribute("href", dataStr);
  div.setAttribute("download", \`presentation.md\`);
  div.click();
})(editor, save);

const loadData = (() => {
  const input = document.createElement("div");
  input.innerHTML = \`<input id="imageinput" type="file" accept=".md">\`;
  const imageInput = input.firstChild;

  imageInput.oncancel = () => imageInput.remove();
  document.body.appendChild(imageInput);
  imageInput.click();
  return new Promise((resolve, reject) => {
    imageInput.onchange = () => {
      const file = imageInput.files[0];
      if (!file) {imageInput.remove(); return;}
      let reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.readAsArrayBuffer(file);
    };
  }).then((data) => {
    imageInput.value = "";
    return new TextDecoder("utf-8").decode(data);
  });

})(load);

const _loader = ((loadData, editor) => {
  editor.dispatch({
    changes: {
      from: 0,
      to: editor.state.doc.length,
      insert: loadData
    }
  });
})(loadData, editor);`]]}