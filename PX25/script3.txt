Hello, this is Yoshiki Ohshima. I’m going to present a programming
environment we’ve been working on.

Our group is working on a local AI system called Substrate. One of the
goals of the project is to create an end-user programming environment
that can utilize locally running AI models. But not only that—we want
to create an environment that is malleable and flexible so that both
humans and computers can dynamically improve the environment itself.

Some of our team members have worked on various end-user programming
systems. This time, we wanted to give the dataflow execution model
another try. We also wanted to show that the dataflow execution model
can be used to build complex and practical programs—interactively and
incrementally.

That led us to create an FRP language called Renkon.

The surface syntax of Renkon is JavaScript and TypeScript. The Renkon
transpiler analyzes top-level node definitions to detect free variable
references and generates code that treats those free variables as
reactive dependencies.

We find the separation between behaviors and events in the original
FRP formulation very useful for writing interactive applications, even
though most so-called reactive frameworks tend to discard that
distinction.

Overall, we think FRP is a good foundation for building a dataflow
programming system—and potentially a good foundation for an end-user
version of it.

Let me show a simple example in Renkon. In this example, a node bound
to the variable hundred gets the value 100 when a promise resolves
after roughly 500 milliseconds, and it keeps the value after it is
resolved. Events.timer creates a node that updates at the specified
interval. The last line has two free variable references: hundred,
timer1, and one known global variable. The node is evaluated when all
its input values are available. As a result, the console prints a
value every second.

The language is agnostic about the graphics library. We can directly
manipulate DOM elements, or we can use a virtual DOM library such as
Preact. This dom node is a virtual DOM element computed as a pure
functional value. The final render node updates the actual display
tree with it. This is good because you can stay in the functional
world as much as possible and only mutate the actual DOM at the last
moment.

Renkon has several combinators to specify non-standard dataflow. I’ll
show two examples.

One is Events.or(). In this example, up is an event that fires when a
button called "up" is pressed. Events.or() fires when any of its
arguments fire, even if the other nodes are undefined.

Another combinator is collect(). It is analogous to the "fby"
construct in some other languages. It starts with an initial value,
and when a trigger fires, the new value is computed using the previous
value and the trigger’s value.

A complex application typically involves some form of cyclic
dependency, which we need to handle in a controlled manner. The
collect combinator is one approach: it allows a node to depend on
itself, but it can only use the previous value.

Another approach is Events.send(). It basically sends an event into
the future—specifically, into the next evaluation cycle. In this
example, the DOM structure created from the application logic affects
the application logic itself. That creates a cyclic dependency, but by
updating the logic in the next evaluation cycle, we avoid problems.

There’s also a mechanism called the dollar variable, but let’s skip
it for now.

Now let’s talk about Renkon-pad, the graphical programming
environment.

In Renkon-pad, you can write Renkon code in a text box. You can also
create a "runner." When you press the play button on the runner, it
gathers code from all text boxes and runs it. You can write multiple
node definitions in one text box. When there are dependencies across
text boxes, they are shown as lines between the boxes. Note that these
lines are purely informational. Let me load a simple example: in this
example, x = 3, y = x + 1, and z = x + y + Events.timer(1000). When I
hover the pointer, it shows dependency arrows.

You can comment out a text box by clicking the checkbox. I can add a
new definition for y and comment out the old one. This allows you to
quickly explore different versions of the code.

Now let’s load Renkon-pad itself into Renkon-pad. As we’ve added
more features, this version is about twice as big as the one described
in the paper. You can see the dependency graph that is more
interesting. When I run this program in a runner, it gives us a new
instance of Renkon-pad.

Before showing some fun demos, let me explain one aspect of the
implementation.  To represent a list of windows in a data structure,
there are different choices. One common approach is to have a single
large tree of data, say, an array called windows, with each window
object containing properties like position and type. In this example,
there are two windows, so the array has two elements.

But Renkon favors a different pattern: using multiple arrays or
Maps. Here, windows is just a list of IDs. positions is a map keyed by
ID, with each value storing the corresponding rectangle object. windowTypes
and other properties work the same way. This is essentially like
having a column in a spreadsheet for each property. This way, you can
update only the necessary parts of the data structure, without needing
to recreate the whole state or worrying about accidental cyclic
dependencies.

Another thing to mention is how user interaction is handled. A
combinator called Events.listener adds an event handler to a DOM
element. So addCode is an event that fires when the DOM node
addCodeButton is clicked.

The handler can be reactive. This moveCompute is a behavior whose
value changes, and when it changes, the previous handler is removed
and a new one is added.

A tiny detail here is that the event handler function must be invoked
by the browser directly. Some operations—like preventDefault()—must
be called within the handler. Our design supports that.

Let me show some demos. The first demo features a different
combinator. FRP allows you to manipulate time, so to speak. For
example, we have a position data like this. It says that when a
moveOrResize event occurs, this logic is invoked and the data
structure is updated. I can insert the Events.delay combinator here
and give it a 2000ms delay. I create a runner and run it. When I try
to move the window in figure 8 and wait 2 seconds, it starts moving. I
can adjust the delay and re-run it.

As I mentioned, you can have multiple node definitions in one text
box, and the dependency graph shows arrows between boxes. But what if
we made a text box for each node? If I add this code to an existing
application and run it, the code decomposes the node definitions into
separate text boxes. I can still run it—because putting node in
different boxes is semantically the same. I had laid out the windows
by hand and saved the version. Let me load it. When I hover the
pointer, you can see that this would be an editor implementation in a
typical node-and-wire diagram, with each box as a node. This is
already getting out of our hands. There are too many node.  Further
more, what happens if we show all lines at once? We can do that by
changing the definition of the graph node so that it doesn’t check
which box is hovered. I run this and load the blown-up version—and
you’ll see that the lines lose their usefulness at this scale. So I
think organizing them into text boxes is a good idea.

I’ve been editing code but running it in a separate iframe. This
isn’t a technical limitation—it’s just more practical. In fact, I
can modify the implementation to update itself.

I change this one line, so instead of sending the code into the
iframe, it updates itself. I save this version and run it in a
runner. I then edit the CSS—say, the title color—and run it. It
updates itself. It’s fun and doable—but not very practical. That’s
why we prefer having a separate environment to run your program.

For some of us Squeak Smalltalkers, there’s a benchmark for seeing
whether a programming environment is powerful enough: can you rotate
the code editing windows?

I add a program that computes the necessary CSS for rotation and
inserts it into the document head. I run it—and now the windows
rotate. This is another reason why you might want to keep editing and
execution environments separate.

Okay, I made some other more praxtical applications, including the
presentation tool I used. I have a rhythm game implemented. The time
aware nature of the language is useful to make a real time game.

There are some future work. Most notably, I'd like to have stronger
linting feature in the environment. THat woudl involve defining
TypeScript lint rules that is aware of Events and Behavior
distinction. Another is actually do the LLM integration.
